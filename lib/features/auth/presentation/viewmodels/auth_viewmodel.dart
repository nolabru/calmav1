import 'dart:async';
import 'package:flutter/foundation.dart';
import '../../domain/repositories/auth_repository.dart';
import '../../domain/models/user_model.dart';

/// AuthViewModel - ViewModel para gerenciar o estado de autentica√ß√£o
///
/// Gerencia o estado de autentica√ß√£o e fornece m√©todos para interagir com o reposit√≥rio.
class AuthViewModel extends ChangeNotifier {
  /// Reposit√≥rio de autentica√ß√£o
  final AuthRepository _repository;
  
  /// Indica se uma opera√ß√£o est√° em andamento
  bool isLoading = false;
  
  /// Mensagem de erro, se houver
  String? errorMessage;
  
  /// Usu√°rio atualmente autenticado
  UserModel? currentUser;
  
  /// Indica se o ViewModel foi inicializado
  bool isInitialized = false;
  
  /// Subscription para o stream de usu√°rios
  late StreamSubscription<UserModel?> _userSubscription;
  
  /// Construtor do AuthViewModel
  AuthViewModel(this._repository) {
    _initialize();
  }
  
  /// Inicializa o ViewModel
  Future<void> _initialize() async {
    debugPrint('üîÑ VIEWMODEL: Inicializando AuthViewModel');
    
    // Ouvir mudan√ßas no usu√°rio
    _userSubscription = _repository.userChanges.listen((user) {
      debugPrint('üîÑ VIEWMODEL: Mudan√ßa no usu√°rio: ${user?.id}');
      currentUser = user;
      isInitialized = true;
      notifyListeners();
    });
    
    // Carregar o usu√°rio atual
    await _loadCurrentUser();
  }
  
  /// Carrega o usu√°rio atual, se houver
  Future<void> _loadCurrentUser() async {
    debugPrint('üîÑ VIEWMODEL: Carregando usu√°rio atual...');
    try {
      currentUser = await _repository.getCurrentUser();
      if (currentUser != null) {
        debugPrint('‚úÖ VIEWMODEL: Usu√°rio carregado com sucesso: ${currentUser!.id}');
      } else {
        debugPrint('‚ö†Ô∏è VIEWMODEL: Nenhum usu√°rio atual encontrado');
      }
    } catch (e) {
      debugPrint('‚ùå VIEWMODEL: Erro ao carregar usu√°rio atual: $e');
    }
    isInitialized = true;
    notifyListeners();
  }
  
  /// Recarrega o usu√°rio atual
  Future<void> reloadCurrentUser() async {
    debugPrint('üîÑ VIEWMODEL: Recarregando usu√°rio atual...');
    await _loadCurrentUser();
  }
  
  /// Registra um novo usu√°rio
  ///
  /// Retorna true se o cadastro for bem-sucedido
  /// 
  /// Se [rememberMe] for true, o usu√°rio permanecer√° logado mesmo ap√≥s fechar o aplicativo
  Future<bool> signUp(String email, String password, String name, {bool rememberMe = false}) async {
    debugPrint('üîÑ VIEWMODEL: Iniciando cadastro para: $email (rememberMe: $rememberMe)');
    isLoading = true;
    errorMessage = null;
    notifyListeners();
    
    final result = await _repository.signUp(email, password, name, rememberMe: rememberMe);
    
    return result.fold(
      (error) {
        debugPrint('‚ùå VIEWMODEL: Erro no cadastro: $error');
        errorMessage = error;
        isLoading = false;
        notifyListeners();
        return false;
      },
      (user) {
        debugPrint('‚úÖ VIEWMODEL: Cadastro bem-sucedido para: ${user.email}');
        currentUser = user;
        isLoading = false;
        notifyListeners();
        return true;
      }
    );
  }
  
  /// Autentica um usu√°rio existente
  ///
  /// Retorna true se o login for bem-sucedido
  /// 
  /// Se [rememberMe] for true, o usu√°rio permanecer√° logado mesmo ap√≥s fechar o aplicativo
  Future<bool> signIn(String email, String password, {bool rememberMe = false}) async {
    debugPrint('üîÑ VIEWMODEL: Iniciando login para: $email (rememberMe: $rememberMe)');
    isLoading = true;
    errorMessage = null;
    notifyListeners();
    
    final result = await _repository.signIn(email, password, rememberMe: rememberMe);
    
    return result.fold(
      (error) {
        debugPrint('‚ùå VIEWMODEL: Erro no login: $error');
        errorMessage = error;
        isLoading = false;
        notifyListeners();
        return false;
      },
      (user) async {
        debugPrint('‚úÖ VIEWMODEL: Login bem-sucedido para: ${user.email}');
        currentUser = user;
        isLoading = false;
        
        // Aguardar um momento para garantir que a sess√£o seja estabelecida
        await Future.delayed(const Duration(milliseconds: 500));
        
        // Recarregar o usu√°rio para garantir que temos os dados mais recentes
        await reloadCurrentUser();
        
        return true;
      }
    );
  }
  
  /// Encerra a sess√£o do usu√°rio atual
  Future<void> signOut() async {
    debugPrint('üîÑ VIEWMODEL: Encerrando sess√£o');
    isLoading = true;
    notifyListeners();
    
    await _repository.signOut();
    
    currentUser = null;
    isLoading = false;
    notifyListeners();
    debugPrint('‚úÖ VIEWMODEL: Sess√£o encerrada com sucesso');
  }
  
  /// Solicita redefini√ß√£o de senha para o email fornecido
  ///
  /// Retorna true se a solicita√ß√£o for bem-sucedida
  Future<bool> resetPassword(String email) async {
    debugPrint('üîÑ VIEWMODEL: Solicitando redefini√ß√£o de senha para: $email');
    isLoading = true;
    errorMessage = null;
    notifyListeners();
    
    final result = await _repository.resetPassword(email);
    
    return result.fold(
      (error) {
        debugPrint('‚ùå VIEWMODEL: Erro na redefini√ß√£o de senha: $error');
        errorMessage = error;
        isLoading = false;
        notifyListeners();
        return false;
      },
      (_) {
        debugPrint('‚úÖ VIEWMODEL: Solicita√ß√£o de redefini√ß√£o enviada com sucesso');
        isLoading = false;
        notifyListeners();
        return true;
      }
    );
  }
  
  /// Atualiza o perfil do usu√°rio
  ///
  /// Retorna true se a atualiza√ß√£o for bem-sucedida
  Future<bool> updateProfile({String? name, Map<String, dynamic>? metadata}) async {
    if (currentUser == null) {
      debugPrint('‚ùå VIEWMODEL: Tentativa de atualizar perfil sem usu√°rio logado');
      errorMessage = 'Nenhum usu√°rio logado';
      notifyListeners();
      return false;
    }
    
    debugPrint('üîÑ VIEWMODEL: Atualizando perfil para: ${currentUser!.id}');
    isLoading = true;
    errorMessage = null;
    notifyListeners();
    
    final updatedUser = currentUser!.copyWith(
      name: name,
      metadata: metadata,
    );
    
    final result = await _repository.updateProfile(updatedUser);
    
    return result.fold(
      (error) {
        debugPrint('‚ùå VIEWMODEL: Erro ao atualizar perfil: $error');
        errorMessage = error;
        isLoading = false;
        notifyListeners();
        return false;
      },
      (user) {
        debugPrint('‚úÖ VIEWMODEL: Perfil atualizado com sucesso');
        currentUser = user;
        isLoading = false;
        notifyListeners();
        return true;
      }
    );
  }
  
  /// Atualiza a senha do usu√°rio
  ///
  /// Retorna true se a atualiza√ß√£o for bem-sucedida
  Future<bool> updatePassword(String currentPassword, String newPassword) async {
    debugPrint('üîÑ VIEWMODEL: Atualizando senha');
    isLoading = true;
    errorMessage = null;
    notifyListeners();
    
    final result = await _repository.updatePassword(currentPassword, newPassword);
    
    return result.fold(
      (error) {
        debugPrint('‚ùå VIEWMODEL: Erro ao atualizar senha: $error');
        errorMessage = error;
        isLoading = false;
        notifyListeners();
        return false;
      },
      (_) {
        debugPrint('‚úÖ VIEWMODEL: Senha atualizada com sucesso');
        isLoading = false;
        notifyListeners();
        return true;
      }
    );
  }
  
  /// Envia um email de verifica√ß√£o para o usu√°rio atual
  ///
  /// Retorna true se o envio for bem-sucedido
  Future<bool> sendEmailVerification() async {
    debugPrint('üîÑ VIEWMODEL: Enviando verifica√ß√£o de email');
    isLoading = true;
    errorMessage = null;
    notifyListeners();
    
    final result = await _repository.sendEmailVerification();
    
    return result.fold(
      (error) {
        debugPrint('‚ùå VIEWMODEL: Erro ao enviar verifica√ß√£o de email: $error');
        errorMessage = error;
        isLoading = false;
        notifyListeners();
        return false;
      },
      (_) {
        debugPrint('‚úÖ VIEWMODEL: Email de verifica√ß√£o enviado com sucesso');
        isLoading = false;
        notifyListeners();
        return true;
      }
    );
  }
  
  /// Verifica se o email do usu√°rio atual est√° verificado
  ///
  /// Retorna true se o email estiver verificado
  Future<bool> isEmailVerified() async {
    debugPrint('üîÑ VIEWMODEL: Verificando se o email est√° verificado');
    return await _repository.isEmailVerified();
  }
  
  @override
  void dispose() {
    debugPrint('üîÑ VIEWMODEL: Liberando recursos do AuthViewModel');
    _userSubscription.cancel();
    super.dispose();
  }
}
